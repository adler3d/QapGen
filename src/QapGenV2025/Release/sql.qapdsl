
t_sep_seq:i_sep{
  string body=any(" \t\r\n");
}
t_sql_block_comment:i_sep{
  "/*"
  string body=end("*/");
}
t_sql_line_comment:i_sep{
  "--"
  string body=any(dip_inv("\n"))?;
}
t_sep{
  t_impl{
    vector<TAutoPtr<i_sep>> arr;
  }
  string value=str<t_impl>();
}

using " " as t_sep;

t_str_raw:i_str_item{
  string body=any(dip_inv("'\\\n"));
}
t_str_hex:i_str_item{
  "\\x"
  ARRAY2char body=any_arr_char(gen_dips("09afAF"));
}
t_str_unicode:i_str_item{
  "\\u"
  ARRAY4char body=any_arr_char(gen_dips("09"));
}
t_str_escape:i_str_item{
  "\\"
  char body=any_char("tfbrn\\'\""+gen_dips("07"));
}
t_str_impl{
  "'"
  vector<TAutoPtr<i_str_item>> arr;
  "'"
}

t_str_expr:i_expr{
  string value=str<t_str_impl>();
}

t_name{
  t_impl{
    char A=any_char(gen_dips("azAZ")+"_");
    string B=any(gen_dips("azAZ09")+"_")?;
  }
  string name=str<t_impl>();
}

t_column_item{
  " "?
  t_name col;
}
t_column_list{
  t_star{"*"}
  TAutoPtr<t_star> star?;
  t_column_item first;
  vector<t_column_item> arr=vec(",")?;
}

t_lev01{
  string oper=any_str_from_vec(split("not,+,-",","))?;
  " "?
  TAutoPtr<i_expr> expr;
}
t_lev02{
  t_oper{string value=any_str_from_vec(split("*,/,%,div,mod",","));}
  t_item{" "? t_oper oper;" "?t_lev01 expr;}
  t_lev01 expr;
  vector<t_item> arr?;
}
t_lev03{
  t_oper{string value=any_str_from_vec(split("+,-",","));}
  t_item{" "? t_oper oper;" "?t_lev02 expr;}
  t_lev02 expr;
  vector<t_item> arr?;
}
t_lev04{
  t_oper{string value=any_str_from_vec(split("shl,shr",","));}
  t_item{" "? t_oper oper;" "?t_lev03 expr;}
  t_lev03 expr;
  vector<t_item> arr?;
}
t_lev05{
  t_oper{"||"[::]inline static const string value="||";}
  t_item{" "?t_oper oper;" "?t_lev04 expr;}
  t_lev04 expr;
  vector<t_item> arr?;
}
t_lev06{
  t_oper{string value=any_str_from_vec(split("=,<>,<,>,<=,>=,like,is,between,in",","));}
  t_item{" "? t_oper oper;" "?t_lev05 expr;}
  t_lev05 expr;
  vector<t_item> arr?;

  // --- IN (список) ---
  //t_in_list{ - не нужен, т.к реализуется уже автоматом?
  //  " "?
  //  "in"
  //  " "?
  //  "("
  //  " "?
  //  t_lev05 first;
  //  vector<t_lev05> rest=vec(",")?;
  //  " "?
  //  ")"
  //}

  // --- IN (подзапрос) ---
  //t_in_subquery{- не нужен, т.к реализуется через t_lvl01, скобочик - это t_block_expr?
  //  " "?
  //  "in"
  //  " "?
  //  "("
  //  " "?
  //  t_select_stat query;
  //  " "?
  //  ")"
  //}

  // --- IS [NOT] NULL ---
  //t_is_null{- не нужен, т.к реализуется уже автоматом через t_lvl01
  //  " "?
  //  "is"
  //  " "?
  //  "not"? " "? "null"
  //}

  // --- BETWEEN ---
  //t_between{- не нужен, т.к реализуется уже автоматом через t_lvl01 и t_lev07?
  //  " "?
  //  "between"
  //  " "?
  //  t_lev05 low;
  //  " "?
  //  "and"
  //  " "?
  //  t_lev05 high;
  //}
}
t_lev07{
  t_oper{"and"[::]inline static const string value="and";}
  t_item{" "?t_oper oper;" "?t_lev06 expr;}
  t_lev06 expr;
  vector<t_item> arr?;
}
t_lev08{
  t_oper{"or"[::]inline static const string value="or";}
  t_item{" "?t_oper oper;" "?t_lev07 expr;}
  t_lev07 expr;
  vector<t_item> arr?;
}

t_block_expr:i_expr{
  "("
  " "?
  t_lev08 expr;
  " "?
  ")"
}

t_when_branch{
  " "?
  "when"
  " "?
  t_lev08 cond;
  " "?
  "then"
  " "?
  t_lev08 result;
}

t_else_branch{
  "else"
  " "?
  t_lev08 result;
}

t_case_expr:i_expr{
  "case"
  " "?
  t_lev08 input?;
  " "?
  t_when_branch first_when;
  vector<t_when_branch> more_when=vec(" ")?;
  " "?
  TAutoPtr<t_else_branch> else_branch?;
  " "?
  "end"
}

t_agg_func:i_agg_func{
  string func=any_str_from_vec(split("sum,min,max,avg",","));
  " "
  "("
  " "?
  t_lev08 expr;
  " "?
  ")" 
}
t_agg_count:i_agg_func{
  t_agg_star:i_s_or_e{"*"};
  t_agg_expr:i_s_or_e{t_lev08 expr;};
  "count"
  " "
  "("
  " "?
  TAutoPtr<i_s_or_e> expr;
  " "?
  ")"
}

t_agg_call:i_expr{
  TAutoPtr<i_agg_func> func;
}

t_table_ref:i_table_expr{
  t_name table;
}

t_joined_table_part:i_table_expr{
  " "?
  string join_type=any_str_from_vec(split("inner join,left join,right join,full join",","));
  " "?
  t_name right;
  " "?
  "on"
  " "?
  t_lev08 on_cond;
}

t_joined_table:i_table_expr{
  t_name left;
  vector<t_joined_table_part> joins;
}

t_subquery:i_table_expr{
  "("
  " "?
  TAutoPtr<i_data_stat> query;
  " "?
  ")"
  " "?
  "as"
  " "?
  t_name alias;
}

t_in_list:i_in_operand{
  "("
  " "?
  t_lev08 first;
  vector<t_lev08> rest=vec(",")?;
  " "?
  ")"
}

t_in_subquery:i_in_operand{
  t_subquery body;
}

t_frac_part{
  "."
  string digits=any(gen_dips("09"));
}
t_exp_part{
  char e=any_char("eE");
  string sign=any_str_from_vec(split("+,-",","))?;
  string digits=any(gen_dips("09"));
}

t_num_expr:i_expr{
  t_int_part:i_num_part{
    char first=any_char(gen_dips("19"));
    string rest=any(gen_dips("09"))?;
  }
  t_zero_part:i_num_part{"0"}
  t_impl{
    //string sign=any_str_from_vec(split("+,-","))?;
    TAutoPtr<i_num_part> int_part;
    TAutoPtr<t_frac_part> frac?;
    TAutoPtr<t_exp_part> exp?;
  }
  string value=str<t_impl>();
}

t_var_expr:i_expr{t_name name;}

t_nullif_func:i_expr{
  string kw=any_str_from_vec(split("nullif,ifnull",","));
  " "?
  "("
  " "?
  t_lev08 left;
  " "?
  ","
  " "?
  t_lev08 right;
  " "?
  ")"
}

t_host_expr:i_expr{
  ":"
  " "?
  t_name var;// TODO: replace with any pascal expr
}

t_where_clause{
  "where"
  " "?
  t_lev08 cond;
}

t_group_by_clause{
  "group"
  " "?
  "by"
  " "?
  t_column_list cols;
}

t_having_clause{
  "having"
  " "?
  t_lev08 cond;
}

t_order_by_item{
  " "?
  t_name col;
  " "?
  string order=any_str_from_vec(split("asc,desc",","))?;
  " "?
}

t_order_by_clause{
  "order" " "? "by"
  " "?
  vector<t_order_by_item> arr=vec(",")?;
}
t_distinct_kw{"distinct"}

t_select_stat:i_data_stat{
  "select"
  " "?
  TAutoPtr<t_distinct_kw> distinct?;
  " "?
  t_column_list cols;
  " "?
  "from"
  " "?
  TAutoPtr<i_table_expr> table;
  " "?
  TAutoPtr<t_where_clause> where?;
  " "?
  TAutoPtr<t_group_by_clause> group_by?;
  " "?
  TAutoPtr<t_having_clause> having?;
  " "?
  TAutoPtr<t_order_by_clause> order_by?;
}

t_union_part{
  " "?
  string op=any_str_from_vec(split("union,union all",","));
  " "?
  t_select_stat query;
}

t_union_stat:i_data_stat{
  t_select_stat first;
  vector<t_union_part> unions;
}

t_values_row{
  " "?
  "("
  " "?
  vector<TAutoPtr<i_expr>> exprs=vec(",");
  " "?
  ")"
  " "?
}

t_values_body:i_insert_body{
  "values"
  " "?
  vector<t_values_row> arr=vec(",")?;
}

t_select_body:i_insert_body{
  t_select_stat query;
}

t_insert_stat:i_data_stat{
  "insert"
  " "?
  "into"
  " "?
  t_name table;
  " "?
  TAutoPtr<i_insert_body> body;
  " "?
}

t_update_item{
  " "?
  t_name col;
  " "?
  "="
  " "?
  t_lev08 expr;
  " "?
}

t_update_stat:i_data_stat{
  "update"
  " "?
  t_name table;
  " "?
  "set"
  t_update_item first;
  vector<t_update_item> rest=vec(",")?;
  TAutoPtr<t_where_clause> where?;
}

t_delete_stat:i_data_stat{
  "delete"
  " "?
  "from"
  " "?
  t_name table;
  " "?
  TAutoPtr<t_where_clause> where?;
}

t_sql_script{
  vector<TAutoPtr<i_data_stat>> stats;
}